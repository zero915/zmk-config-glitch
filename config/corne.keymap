/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {

    combos {
        compatible = "zmk,combos";

        underline {
            bindings = <&kp UNDER>;
            key-positions = <28 31>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <4 7>;
        };

        Clear_BLE_Profile {
            bindings = <&bt BT_CLR>;
            key-positions = <0 38 5>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <30 31>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <17 16>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <5 6>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <8 7>;
        };

        left_par {
            bindings = <&kp LPAR>;
            key-positions = <4 5>;
        };

        right_par {
            bindings = <&kp RPAR>;
            key-positions = <7 6>;
        };

        left_prc {
            bindings = <&kp LBRC>;
            key-positions = <2 3>;
        };

        right_prc {
            bindings = <&kp RBRC>;
            key-positions = <8 9>;
        };

        backslsh {
            bindings = <&kp BSLH>;
            key-positions = <10 9>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <1 2>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <26 25>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 29>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <24 25>;
        };

        return {
            bindings = <&kp RET>;
            key-positions = <21 22>;
        };
    };

    macros {
        save: save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESCAPE &kp COLON &kp W &kp ENTER>;

            label = "SAVE";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp B &kp R &kp Y &kp A &kp N &kp AT &kp P &kp E &kp C &kp J &kp O &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };

        git_status: git_status {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp S &kp T &kp A &kp T &kp U &kp S>;
            label = "GIT_STATUS";
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
